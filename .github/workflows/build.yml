name: CMake Build

on: [push]

jobs:

  build:
    #if: contains(github.ref, 'tags/v')
    runs-on: windows-2022
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive

    - uses: actions/setup-go@v4
      with:
        go-version: '1.21' # I want latest, but I need to select some arbitrary version for installing the 32bit variant, see https://github.com/actions/setup-go/issues/347#issuecomment-1699466025
        architecture: x32
        cache: false # cannot work since this project does not make use of the go.sum file

    - name: Install x86 GCC
      run: C:\msys64\usr\bin\pacman.exe --sync --needed --noconfirm mingw-w64-i686-gcc mingw-w64-i686-gcc
      
    #- name: Add x86 GCC to PATH
    #  run: echo C:\msys64\mingw32\bin >> $GITHUB_PATH
      
    - name: Add x86 GCC to PATH
      shell: pwsh
      run: |
        echo "C:\msys64\mingw32\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      
    - name: vcpkg
      uses: johnwason/vcpkg-action@v5
      with:
        pkgs: opusfile
        triplet: 'x86-mingw-static'
        token: ${{ github.token }}

    #- name: Add vcpkg's ninja to PATH
    #  run: echo ${{ github.workspace }}\vcpkg\downloads\tools\ninja\* >> $GITHUB_PATH

    - name: Output GCC Version
      run: |
        echo $env:PATH
        $env:PATH="C:/msys64/mingw32/bin;"+$env:PATH
        (Get-Command gcc)
        gcc --version

    - name: Configure
      run: |
        $env:PATH="C:/msys64/mingw32/bin;"+$env:PATH
        cmake -S . -B build -D CMAKE_BUILD_TYPE=Debug -G "MSYS Makefiles" -DCMAKE_PREFIX_PATH=${{ github.workspace }}/vcpkg/installed/x86-mingw-static -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake -DVCPKG_TARGET_TRIPLET=x86-mingw-static -DVCPKG_MANIFEST_MODE=OFF

    - name: Build
      run: cmake --build build

    - name: Strip
      run: strip -s build/src/c/libwhatsmeow.dll

    - name: Upload
      uses: actions/upload-artifact@v1
      with:
        path: build/src/c/libwhatsmeow.dll
        name: libwhatsmeow.dll

  release:
    if: contains(github.ref, 'tags/v')
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1.0.0
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
        body_path: ./CHANGELOG.md

    - name: Store Release url
      run: |
        echo "${{ steps.create_release.outputs.upload_url }}" > ./upload_url

    - uses: actions/upload-artifact@v1
      with:
        path: ./upload_url
        name: upload_url

  publish:
    if: contains(github.ref, 'tags/v')
    runs-on: ubuntu-latest
    needs: release

    steps:
    - name: Download artifact
      uses: actions/download-artifact@v1
      with:
        name: libwhatsmeow.dll
        path: ./

    - name: Download URL
      uses: actions/download-artifact@v1
      with:
        name: upload_url
        path: ./
    - id: set_upload_url
      run: |
        upload_url=`cat ./upload_url`
        echo ::set-output name=upload_url::$upload_url

    - name: Upload to Release
      id: upload_to_release
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        upload_url: ${{ steps.set_upload_url.outputs.upload_url }}
        asset_path: ./libwhatsmeow.dll
        asset_name: libwhatsmeow.dll
        asset_content_type: application/octet-stream
